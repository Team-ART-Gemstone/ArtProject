<?xml version="1.0" encoding="utf-8"?><span>
<doc>
  <assembly>
    <name>System.IO.Compression.ZipFile</name>
  </assembly>
  <members>
    <member name="T:System.IO.Compression.ZipFile">
      <summary>Provides static methods for creating, extracting, and opening zip archives.</summary>
    </member>
    <member name="M:System.IO.Compression.ZipFile.CreateFromDirectory(System.String,System.String)">
      <summary>Creates a zip archive that contains the files and directories from the specified directory.</summary>
      <param name="sourceDirectoryName">The path to the directory to be archived, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory.</param>
      <param name="destinationArchiveFileName">The path of the archive to be created, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory.</param>
      <exception cref="T:System.ArgumentException">sourceDirectoryName or destinationArchiveFileName is <see cref="F:System.String.Empty"></see>, contains only white space, or contains at least one invalid character.</exception>
      <exception cref="T:System.ArgumentNullException">sourceDirectoryName or destinationArchiveFileName is null.</exception>
      <exception cref="T:System.IO.PathTooLongException">In sourceDirectoryName or destinationArchiveFileName, the specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must not exceed 248 characters, and file names must not exceed 260 characters.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">sourceDirectoryName is invalid or does not exist (for example, it is on an unmapped drive).</exception>
      <exception cref="T:System.IO.IOException">destinationArchiveFileName already exists.   -or-   A file in the specified directory could not be opened.</exception>
      <exception cref="T:System.UnauthorizedAccessException">destinationArchiveFileName specifies a directory.   -or-   The caller does not have the required permission to access the directory specified in sourceDirectoryName or the file specified in destinationArchiveFileName.</exception>
      <exception cref="T:System.NotSupportedException">sourceDirectoryName or destinationArchiveFileName contains an invalid format.   -or-   The zip archive does not support writing.</exception>
    </member>
    <member name="M:System.IO.Compression.ZipFile.CreateFromDirectory(System.String,System.String,System.IO.Compression.CompressionLevel,System.Boolean)">
      <summary>Creates a zip archive that contains the files and directories from the specified directory, uses the specified compression level, and optionally includes the base directory.</summary>
      <param name="sourceDirectoryName">The path to the directory to be archived, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory.</param>
      <param name="destinationArchiveFileName">The path of the archive to be created, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory.</param>
      <param name="compressionLevel">One of the enumeration values that indicates whether to emphasize speed or compression effectiveness when creating the entry.</param>
      <param name="includeBaseDirectory">true to include the directory name from sourceDirectoryName at the root of the archive; false to include only the contents of the directory.</param>
      <exception cref="T:System.ArgumentException">sourceDirectoryName or destinationArchiveFileName is <see cref="F:System.String.Empty"></see>, contains only white space, or contains at least one invalid character.</exception>
      <exception cref="T:System.ArgumentNullException">sourceDirectoryName or destinationArchiveFileName is null.</exception>
      <exception cref="T:System.IO.PathTooLongException">In sourceDirectoryName or destinationArchiveFileName, the specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must not exceed 248 characters, and file names must not exceed 260 characters.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">sourceDirectoryName is invalid or does not exist (for example, it is on an unmapped drive).</exception>
      <exception cref="T:System.IO.IOException">destinationArchiveFileName already exists.   -or-   A file in the specified directory could not be opened.</exception>
      <exception cref="T:System.UnauthorizedAccessException">destinationArchiveFileName specifies a directory.   -or-   The caller does not have the required permission to access the directory specified in sourceDirectoryName or the file specified in destinationArchiveFileName.</exception>
      <exception cref="T:System.NotSupportedException">sourceDirectoryName or destinationArchiveFileName contains an invalid format.   -or-   The zip archive does not support writing.</exception>
    </member>
    <member name="M:System.IO.Compression.ZipFile.CreateFromDirectory(System.String,System.String,System.IO.Compression.CompressionLevel,System.Boolean,System.Text.Encoding)">
      <summary>Creates a zip archive that contains the files and directories from the specified directory, uses the specified compression level and character encoding for entry names, and optionally includes the base directory.</summary>
      <param name="sourceDirectoryName">The path to the directory to be archived, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory.</param>
      <param name="destinationArchiveFileName">The path of the archive to be created, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory.</param>
      <param name="compressionLevel">One of the enumeration values that indicates whether to emphasize speed or compression effectiveness when creating the entry.</param>
      <param name="includeBaseDirectory">true to include the directory name from sourceDirectoryName at the root of the archive; false to include only the contents of the directory.</param>
      <param name="entryNameEncoding">The encoding to use when reading or writing entry names in this archive. Specify a value for this parameter only when an encoding is required for interoperability with zip archive tools and libraries that do not support UTF-8 encoding for entry names.</param>
      <exception cref="T:System.ArgumentException">sourceDirectoryName or destinationArchiveFileName is <see cref="F:System.String.Empty"></see>, contains only white space, or contains at least one invalid character.   -or-  entryNameEncoding is set to a Unicode encoding other than UTF-8.</exception>
      <exception cref="T:System.ArgumentNullException">sourceDirectoryName or destinationArchiveFileName is null.</exception>
      <exception cref="T:System.IO.PathTooLongException">In sourceDirectoryName or destinationArchiveFileName, the specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must not exceed 248 characters, and file names must not exceed 260 characters.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">sourceDirectoryName is invalid or does not exist (for example, it is on an unmapped drive).</exception>
      <exception cref="T:System.IO.IOException">destinationArchiveFileName already exists.   -or-   A file in the specified directory could not be opened.</exception>
      <exception cref="T:System.UnauthorizedAccessException">destinationArchiveFileName specifies a directory.   -or-   The caller does not have the required permission to access the directory specified in sourceDirectoryName or the file specified in destinationArchiveFileName.</exception>
      <exception cref="T:System.NotSupportedException">sourceDirectoryName or destinationArchiveFileName contains an invalid format.   -or-   The zip archive does not support writing.</exception>
    </member>
    <member name="M:System.IO.Compression.ZipFile.ExtractToDirectory(System.String,System.String)">
      <summary>Extracts all the files in the specified zip archive to a directory on the file system.</summary>
      <param name="sourceArchiveFileName">The path to the archive that is to be extracted.</param>
      <param name="destinationDirectoryName">The path to the directory in which to place the extracted files, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory.</param>
      <exception cref="T:System.ArgumentException">destinationDirectoryName or sourceArchiveFileName is <see cref="F:System.String.Empty"></see>, contains only white space, or contains at least one invalid character.</exception>
      <exception cref="T:System.ArgumentNullException">destinationDirectoryName or sourceArchiveFileName is null.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path in destinationDirectoryName or sourceArchiveFileName exceeds the system-defined maximum length. For example, on Windows-based platforms, paths must not exceed 248 characters, and file names must not exceed 260 characters.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
      <exception cref="T:System.IO.IOException">The directory specified by destinationDirectoryName already exists.   -or-   The name of an entry in the archive is <see cref="F:System.String.Empty"></see>, contains only white space, or contains at least one invalid character.   -or-   Extracting an archive entry would create a file that is outside the directory specified by destinationDirectoryName. (For example, this might happen if the entry name contains parent directory accessors.)   -or-   An archive entry to extract has the same name as an entry that has already been extracted from the same archive.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission to access the archive or the destination directory.</exception>
      <exception cref="T:System.NotSupportedException">destinationDirectoryName or sourceArchiveFileName contains an invalid format.</exception>
      <exception cref="T:System.IO.FileNotFoundException">sourceArchiveFileName was not found.</exception>
      <exception cref="T:System.IO.InvalidDataException">The archive specified by sourceArchiveFileName is not a valid zip archive.   -or-   An archive entry was not found or was corrupt.   -or-   An archive entry was compressed by using a compression method that is not supported.</exception>
    </member>
    <member name="M:System.IO.Compression.ZipFile.ExtractToDirectory(System.String,System.String,System.Boolean)">
      <param name="sourceArchiveFileName"></param>
      <param name="destinationDirectoryName"></param>
      <param name="overwriteFiles"></param>
    </member>
    <member name="M:System.IO.Compression.ZipFile.ExtractToDirectory(System.String,System.String,System.Text.Encoding)">
      <summary>Extracts all the files in the specified zip archive to a directory on the file system and uses the specified character encoding for entry names.</summary>
      <param name="sourceArchiveFileName">The path to the archive that is to be extracted.</param>
      <param name="destinationDirectoryName">The path to the directory in which to place the extracted files, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory.</param>
      <param name="entryNameEncoding">The encoding to use when reading or writing entry names in this archive. Specify a value for this parameter only when an encoding is required for interoperability with zip archive tools and libraries that do not support UTF-8 encoding for entry names.</param>
      <exception cref="T:System.ArgumentException">destinationDirectoryName or sourceArchiveFileName is <see cref="F:System.String.Empty"></see>, contains only white space, or contains at least one invalid character.   -or-  entryNameEncoding is set to a Unicode encoding other than UTF-8.</exception>
      <exception cref="T:System.ArgumentNullException">destinationDirectoryName or sourceArchiveFileName is null.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path in destinationDirectoryName or sourceArchiveFileName exceeds the system-defined maximum length. For example, on Windows-based platforms, paths must not exceed 248 characters, and file names must not exceed 260 characters.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
      <exception cref="T:System.IO.IOException">The directory specified by destinationDirectoryName already exists.   -or-   The name of an entry in the archive is <see cref="F:System.String.Empty"></see>, contains only white space, or contains at least one invalid character.   -or-   Extracting an archive entry would create a file that is outside the directory specified by destinationDirectoryName. (For example, this might happen if the entry name contains parent directory accessors.)   -or-   An archive entry to extract has the same name as an entry that has already been extracted from the same archive.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission to access the archive or the destination directory.</exception>
      <exception cref="T:System.NotSupportedException">destinationDirectoryName or sourceArchiveFileName contains an invalid format.</exception>
      <exception cref="T:System.IO.FileNotFoundException">sourceArchiveFileName was not found.</exception>
      <exception cref="T:System.IO.InvalidDataException">The archive specified by sourceArchiveFileName is not a valid zip archive.   -or-   An archive entry was not found or was corrupt.   -or-   An archive entry was compressed by using a compression method that is not supported.</exception>
    </member>
    <member name="M:System.IO.Compression.ZipFile.ExtractToDirectory(System.String,System.String,System.Text.Encoding,System.Boolean)">
      <param name="sourceArchiveFileName"></param>
      <param name="destinationDirectoryName"></param>
      <param name="entryNameEncoding"></param>
      <param name="overwriteFiles"></param>
    </member>
    <member name="M:System.IO.Compression.ZipFile.Open(System.String,System.IO.Compression.ZipArchiveMode)">
      <summary>Opens a zip archive at the specified path and in the specified mode.</summary>
      <param name="archiveFileName">The path to the archive to open, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory.</param>
      <param name="mode">One of the enumeration values that specifies the actions which are allowed on the entries in the opened archive.</param>
      <returns>The opened zip archive.</returns>
      <exception cref="T:System.ArgumentException">archiveFileName is <see cref="F:System.String.Empty"></see>, contains only white space, or contains at least one invalid character.</exception>
      <exception cref="T:System.ArgumentNullException">archiveFileName is null.</exception>
      <exception cref="T:System.IO.PathTooLongException">In archiveFileName, the specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must not exceed 248 characters, and file names must not exceed 260 characters.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">archiveFileName is invalid or does not exist (for example, it is on an unmapped drive).</exception>
      <exception cref="T:System.IO.IOException">archiveFileName could not be opened.   -or-  mode is set to <see cref="F:System.IO.Compression.ZipArchiveMode.Create"></see>, but the file specified in archiveFileName already exists.</exception>
      <exception cref="T:System.UnauthorizedAccessException">archiveFileName specifies a directory.   -or-   The caller does not have the required permission to access the file specified in archiveFileName.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">mode specifies an invalid value.</exception>
      <exception cref="T:System.IO.FileNotFoundException">mode is set to <see cref="F:System.IO.Compression.ZipArchiveMode.Read"></see>, but the file specified in archiveFileName is not found.</exception>
      <exception cref="T:System.NotSupportedException">archiveFileName contains an invalid format.</exception>
      <exception cref="T:System.IO.InvalidDataException">archiveFileName could not be interpreted as a zip archive.   -or-  mode is <see cref="F:System.IO.Compression.ZipArchiveMode.Update"></see>, but an entry is missing or corrupt and cannot be read.   -or-  mode is <see cref="F:System.IO.Compression.ZipArchiveMode.Update"></see>, but an entry is too large to fit into memory.</exception>
    </member>
    <member name="M:System.IO.Compression.ZipFile.Open(System.String,System.IO.Compression.ZipArchiveMode,System.Text.Encoding)">
      <summary>Opens a zip archive at the specified path, in the specified mode, and by using the specified character encoding for entry names.</summary>
      <param name="archiveFileName">The path to the archive to open, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory.</param>
      <param name="mode">One of the enumeration values that specifies the actions that are allowed on the entries in the opened archive.</param>
      <param name="entryNameEncoding">The encoding to use when reading or writing entry names in this archive. Specify a value for this parameter only when an encoding is required for interoperability with zip archive tools and libraries that do not support UTF-8 encoding for entry names.</param>
      <returns>The opened zip archive.</returns>
      <exception cref="T:System.ArgumentException">archiveFileName is <see cref="F:System.String.Empty"></see>, contains only white space, or contains at least one invalid character.   -or-  entryNameEncoding is set to a Unicode encoding other than UTF-8.</exception>
      <exception cref="T:System.ArgumentNullException">archiveFileName is null.</exception>
      <exception cref="T:System.IO.PathTooLongException">In archiveFileName, the specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must not exceed 248 characters, and file names must not exceed 260 characters.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">archiveFileName is invalid or does not exist (for example, it is on an unmapped drive).</exception>
      <exception cref="T:System.IO.IOException">archiveFileName could not be opened.   -or-  mode is set to <see cref="F:System.IO.Compression.ZipArchiveMode.Create"></see>, but the file specified in archiveFileName already exists.</exception>
      <exception cref="T:System.UnauthorizedAccessException">archiveFileName specifies a directory.   -or-   The caller does not have the required permission to access the file specified in archiveFileName.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">mode specifies an invalid value.</exception>
      <exception cref="T:System.IO.FileNotFoundException">mode is set to <see cref="F:System.IO.Compression.ZipArchiveMode.Read"></see>, but the file specified in archiveFileName is not found.</exception>
      <exception cref="T:System.NotSupportedException">archiveFileName contains an invalid format.</exception>
      <exception cref="T:System.IO.InvalidDataException">archiveFileName could not be interpreted as a zip archive.   -or-  mode is <see cref="F:System.IO.Compression.ZipArchiveMode.Update"></see>, but an entry is missing or corrupt and cannot be read.   -or-  mode is <see cref="F:System.IO.Compression.ZipArchiveMode.Update"></see>, but an entry is too large to fit into memory.</exception>
    </member>
    <member name="M:System.IO.Compression.ZipFile.OpenRead(System.String)">
      <summary>Opens a zip archive for reading at the specified path.</summary>
      <param name="archiveFileName">The path to the archive to open, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory.</param>
      <returns>The opened zip archive.</returns>
      <exception cref="T:System.ArgumentException">archiveFileName is <see cref="F:System.String.Empty"></see>, contains only white space, or contains at least one invalid character.</exception>
      <exception cref="T:System.ArgumentNullException">archiveFileName is null.</exception>
      <exception cref="T:System.IO.PathTooLongException">In archiveFileName, the specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must not exceed 248 characters, and file names must not exceed 260 characters.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">archiveFileName is invalid or does not exist (for example, it is on an unmapped drive).</exception>
      <exception cref="T:System.IO.IOException">archiveFileName could not be opened.</exception>
      <exception cref="T:System.UnauthorizedAccessException">archiveFileName specifies a directory.   -or-   The caller does not have the required permission to access the file specified in archiveFileName.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified in archiveFileName is not found.</exception>
      <exception cref="T:System.NotSupportedException">archiveFileName contains an invalid format.</exception>
      <exception cref="T:System.IO.InvalidDataException">archiveFileName could not be interpreted as a zip archive.</exception>
    </member>
    <member name="T:System.IO.Compression.ZipFileExtensions">
      <summary>Provides extension methods for the <see cref="T:System.IO.Compression.ZipArchive"></see> and <see cref="T:System.IO.Compression.ZipArchiveEntry"></see> classes.</summary>
    </member>
    <member name="M:System.IO.Compression.ZipFileExtensions.CreateEntryFromFile(System.IO.Compression.ZipArchive,System.String,System.String)">
      <summary>Archives a file by compressing it and adding it to the zip archive.</summary>
      <param name="destination">The zip archive to add the file to.</param>
      <param name="sourceFileName">The path to the file to be archived. You can specify either a relative or an absolute path. A relative path is interpreted as relative to the current working directory.</param>
      <param name="entryName">The name of the entry to create in the zip archive.</param>
      <returns>A wrapper for the new entry in the zip archive.</returns>
      <exception cref="T:System.ArgumentException">sourceFileName is <see cref="F:System.String.Empty"></see>, contains only white space, or contains at least one invalid character.   -or-  entryName is <see cref="F:System.String.Empty"></see>.</exception>
      <exception cref="T:System.ArgumentNullException">sourceFileName or entryName is null.</exception>
      <exception cref="T:System.IO.PathTooLongException">In sourceFileName, the specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must not exceed 248 characters, and file names must not exceed 260 characters.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">sourceFileName is invalid (for example, it is on an unmapped drive).</exception>
      <exception cref="T:System.IO.IOException">The file specified by sourceFileName cannot be opened.</exception>
      <exception cref="T:System.UnauthorizedAccessException">sourceFileName specifies a directory.   -or-   The caller does not have the required permission to access the file specified by sourceFileName.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified by sourceFileName is not found.</exception>
      <exception cref="T:System.NotSupportedException">The sourceFileName parameter is in an invalid format.   -or-   The zip archive does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">The zip archive has been disposed.</exception>
    </member>
    <member name="M:System.IO.Compression.ZipFileExtensions.CreateEntryFromFile(System.IO.Compression.ZipArchive,System.String,System.String,System.IO.Compression.CompressionLevel)">
      <summary>Archives a file by compressing it using the specified compression level and adding it to the zip archive.</summary>
      <param name="destination">The zip archive to add the file to.</param>
      <param name="sourceFileName">The path to the file to be archived. You can specify either a relative or an absolute path. A relative path is interpreted as relative to the current working directory.</param>
      <param name="entryName">The name of the entry to create in the zip archive.</param>
      <param name="compressionLevel">One of the enumeration values that indicates whether to emphasize speed or compression effectiveness when creating the entry.</param>
      <returns>A wrapper for the new entry in the zip archive.</returns>
      <exception cref="T:System.ArgumentException">sourceFileName is <see cref="F:System.String.Empty"></see>, contains only white space, or contains at least one invalid character.   -or-  entryName is <see cref="F:System.String.Empty"></see>.</exception>
      <exception cref="T:System.ArgumentNullException">sourceFileName or entryName is null.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">sourceFileName is invalid (for example, it is on an unmapped drive).</exception>
      <exception cref="T:System.IO.PathTooLongException">In sourceFileName, the specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must not exceed 248 characters, and file names must not exceed 260 characters.</exception>
      <exception cref="T:System.IO.IOException">The file specified by sourceFileName cannot be opened.</exception>
      <exception cref="T:System.UnauthorizedAccessException">sourceFileName specifies a directory.   -or-   The caller does not have the required permission to access the file specified by sourceFileName.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified by sourceFileName is not found.</exception>
      <exception cref="T:System.NotSupportedException">The sourceFileName parameter is in an invalid format.   -or-   The zip archive does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">The zip archive has been disposed.</exception>
    </member>
    <member name="M:System.IO.Compression.ZipFileExtensions.ExtractToDirectory(System.IO.Compression.ZipArchive,System.String)">
      <summary>Extracts all the files in the zip archive to a directory on the file system.</summary>
      <param name="source">The zip archive to extract files from.</param>
      <param name="destinationDirectoryName">The path to the directory to place the extracted files in. You can specify either a relative or an absolute path. A relative path is interpreted as relative to the current working directory.</param>
      <exception cref="T:System.ArgumentException">destinationDirectoryName is <see cref="F:System.String.Empty"></see>, contains only white space, or contains at least one invalid character.</exception>
      <exception cref="T:System.ArgumentNullException">destinationDirectoryName is null.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path exceeds the system-defined maximum length. For example, on Windows-based platforms, paths must not exceed 248 characters, and file names must not exceed 260 characters.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
      <exception cref="T:System.IO.IOException">The directory specified by destinationDirectoryName already exists.   -or-   The name of an entry in the archive is <see cref="F:System.String.Empty"></see>, contains only white space, or contains at least one invalid character.   -or-   Extracting an entry from the archive would create a file that is outside the directory specified by destinationDirectoryName. (For example, this might happen if the entry name contains parent directory accessors.)   -or-   Two or more entries in the archive have the same name.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission to write to the destination directory.</exception>
      <exception cref="T:System.NotSupportedException">destinationDirectoryName contains an invalid format.</exception>
      <exception cref="T:System.IO.InvalidDataException">An archive entry cannot be found or is corrupt.   -or-   An archive entry was compressed by using a compression method that is not supported.</exception>
    </member>
    <member name="M:System.IO.Compression.ZipFileExtensions.ExtractToDirectory(System.IO.Compression.ZipArchive,System.String,System.Boolean)">
      <param name="source"></param>
      <param name="destinationDirectoryName"></param>
      <param name="overwriteFiles"></param>
    </member>
    <member name="M:System.IO.Compression.ZipFileExtensions.ExtractToFile(System.IO.Compression.ZipArchiveEntry,System.String)">
      <summary>Extracts an entry in the zip archive to a file.</summary>
      <param name="source">The zip archive entry to extract a file from.</param>
      <param name="destinationFileName">The path of the file to create from the contents of the entry. You can  specify either a relative or an absolute path. A relative path is interpreted as relative to the current working directory.</param>
      <exception cref="T:System.ArgumentException">destinationFileName is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"></see>.   -or-  destinationFileName specifies a directory.</exception>
      <exception cref="T:System.ArgumentNullException">destinationFileName is null.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must not exceed 248 characters, and file names must not exceed 260 characters.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
      <exception cref="T:System.IO.IOException">destinationFileName already exists.   -or-   An I/O error occurred.   -or-   The entry is currently open for writing.   -or-   The entry has been deleted from the archive.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission to create the new file.</exception>
      <exception cref="T:System.IO.InvalidDataException">The entry is missing from the archive, or is corrupt and cannot be read.   -or-   The entry has been compressed by using a compression method that is not supported.</exception>
      <exception cref="T:System.ObjectDisposedException">The zip archive that this entry belongs to has been disposed.</exception>
      <exception cref="T:System.NotSupportedException">destinationFileName is in an invalid format.   -or-   The zip archive for this entry was opened in <see cref="F:System.IO.Compression.ZipArchiveMode.Create"></see> mode, which does not permit the retrieval of entries.</exception>
    </member>
    <member name="M:System.IO.Compression.ZipFileExtensions.ExtractToFile(System.IO.Compression.ZipArchiveEntry,System.String,System.Boolean)">
      <summary>Extracts an entry in the zip archive to a file, and optionally overwrites an existing file that has the same name.</summary>
      <param name="source">The zip archive entry to extract a file from.</param>
      <param name="destinationFileName">The path of the file to create from the contents of the entry. You can specify either a relative or an absolute path. A relative path is interpreted as relative to the current working directory.</param>
      <param name="overwrite">true to overwrite an existing file that has the same name as the destination file; otherwise, false.</param>
      <exception cref="T:System.ArgumentException">destinationFileName is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"></see>.   -or-  destinationFileName specifies a directory.</exception>
      <exception cref="T:System.ArgumentNullException">destinationFileName is null.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must not exceed 248 characters, and file names must not exceed 260 characters.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
      <exception cref="T:System.IO.IOException">destinationFileName already exists and overwrite is false.   -or-   An I/O error occurred.   -or-   The entry is currently open for writing.   -or-   The entry has been deleted from the archive.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission to create the new file.</exception>
      <exception cref="T:System.IO.InvalidDataException">The entry is missing from the archive or is corrupt and cannot be read.   -or-   The entry has been compressed by using a compression method that is not supported.</exception>
      <exception cref="T:System.ObjectDisposedException">The zip archive that this entry belongs to has been disposed.</exception>
      <exception cref="T:System.NotSupportedException">destinationFileName is in an invalid format.   -or-   The zip archive for this entry was opened in <see cref="F:System.IO.Compression.ZipArchiveMode.Create"></see> mode, which does not permit the retrieval of entries.</exception>
    </member>
  </members>
</doc></span>